<?php
/**
 * @file
 * Basic functional and Unit testing for phone number module.
 */

class PhoneNumberTestCase extends DrupalWebTestCase {

  protected $person;

  /**
   * Overides parent::setUp().
   */
  public function setUp() {
    $this->setup = TRUE;
    $this->phoneNumber = new PhoneNumber();
    $this->form = new PhoneNumberEntityForm($this->phoneNumber->getEntity());
  }

  /**
   * Overides parent::tearDown().
   */
  public function tearDown() {
  }

  /**
   * Overides parent::getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Phone Number Module Unit tests.',
      'description' => 'Unit tests for Phone Number module.',
      'group' => 'Jenkins',
    );
  }

  /**
   * Verify phone_number_regex_match works as expected.
   */
  public function testEmailRegex() {
    $valid_numbers = array('1234567890',
      '(123)4567890',
      '(123) 4567890',
      '(123) 456 7890',
      '(123)-456-7890',
      '123 456 7890',
      '123-456-7890',
      '123.456.7890',
    );
    $invalid_numbers = array('800-can-talk','1234567');
    foreach ($valid_numbers as $number) {
      $message = "{$number} is no a valid number";
      $this->assertTrue(phone_number_regex_match($number), $message);
    }
    foreach ($invalid_numbers as $number) {
      $message = "{$number} should not be a valid number";
      $this->assertFalse(phone_number_regex_match($number), $message);
    }
  }

  /**
   * Check that phone_only_meric() works as expected.
   */
  public function testOnlyNumericInPhoneNumber() {
    $matches = phone_number_regex_match('(123)-456.7890');
    $number = phone_number_only_numeric($matches);
    $this->assertEqual($number, '1234567890', "{$number} should be 10 digits");
  }

  /**
   * Verify phone_type field assertions.
   */
  public function testPhoneTypeField() {
    $field = $this->form->getElement('phone_type');
    $this->assertEqual($field['#title'], 'Type', "field phone_type exists.");
    $this->assertEqual($field['#type'], 'select', "field phone_type type is select.");
    $expected_options = array(
      '_none' => '- None -',
      'Phone' => 'Phone',
      'Fax' => 'Fax',
    );
    $this->assertEqual($field['#options'], $expected_options, "field phone_type has the expected options.");
  }

  /**
   * Verify phone_number field assertions.
   */
  public function testPhoneNumberField() {
    $field = $this->form->getElement('number');
    $type = $field['#type'];
    $this->assertEqual($field['#title'], 'Number', "field number exists.");
    $this->assertEqual($type, 'textfield', 'field number is type textfield');
  }
}
