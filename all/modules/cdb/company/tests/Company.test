<?php
/**
 * @file
 * Basic functional and Unit testing for Company Entity.
 */

class CompanyTestCase extends DrupalWebTestCase {

  protected $company;

  /**
   * Sets up tests.
   */
  public function setUp() {
    module_load_include('install', 'company');
    company_set_defaults();
    $this->setup = TRUE;
    $this->company = new Company();
    $this->form = new CompanyEntityForm($this->company->getEntity());
  }

  /**
   * Teardown tests.
   */
  public function tearDown() {
  }

  /**
   * Initialize.
   */
  public static function getInfo() {
    return array(
      'name' => 'Company Entity tests.',
      'description' => 'Unit tests for Company entity.',
      'group' => 'Jenkins',
    );
  }

  /**
   * Verify mas90_name field assertions.
   */
  public function testMas90NameField() {
    $mas90_name = $this->company->getFieldInfo('mas90_name');

    $this->assertTrue(isset($mas90_name['bundles']['company']), "mas90_name is a company field.");
    $this->assertEqual($mas90_name['label'], 'Mas90 Name', "mas90_name label is 'Mas90 Name': $mas90_name[label].");
    $this->assertTrue($mas90_name['required'], "mas90_name is required.");
    $this->assertEqual($mas90_name['settings']['max_length'], 30, "mas90_name max_length is 30: $mas90_name[settings][max_length]");

  }

  /**
   * Verify suspended field assertions.
   */
  public function testSuspendedField() {
    $suspended = $this->company->getFieldInfo('suspended');
    $label = $suspended['label'];
    $required = $suspended['required'];
    $options = $this->company->suspended()->optionsList();

    $this->assertEqual($label, 'Suspended', "suspended label is 'Suspended': $suspended[label].");
    $this->assertTrue($required, "suspended is required.");

    $expected_options = array('Y' => 'Yes', 'N' => 'No', 'P' => 'Probation');
    $this->assertEqual($options, $expected_options, "The suspended options are as expected.");
  }

  /**
   * Verify address field.
   */
  public function testAddressField() {
    $address = $this->company->getFieldInfo('address');
    $label = $address['label'];
    $required = $address['required'];
    $this->assertTrue(is_array($address), "The address field is present in comany.");
    $this->assertFalse($required, 'The address is not required.');
    $this->assertEqual($label, 'Address', "The address label is 'Address' : $label");
  }

  /**
   * Verify exp_date field assertions.
   */
  public function testExpDateField() {
    // Always Jan 1 of the following year, unless the user is not a Company
    // Administrator: in which case we default to Null or empty.
    $default_exp_date = $this->form->getDefaultElementValue('exp_date');
    $this->assertEqual($default_exp_date, 'Next Year January 1', "The default exp date has been set.: $default_exp_date");

    // Verify that a non Company Administrator default to empty exp_date.
    $exp_date = $this->form
      ->getElementPropertyValue('exp_date', array('#default_value', 'value'));
    $this->assertEqual($exp_date, '', "Non Company administrators get no exp_date defaults.");

    // Verify Company Administrators get a default exp_date.
    $user = new User();
    $user->loginAs('Company Administrator');
    $form = new CompanyEntityForm($this->company->getEntity());
    $exp_date = $form->getElementPropertyValue('exp_date',
      array('#default_value', 'value'));
    $this->assertEqual($exp_date, '2014-01-01 00:00:00', "Company administrators get a default exp_date.");
    $user->reset();

    // When this field gets updated make sure that the Invoice field is also
    // updated automatically.
    $exp_date = $this->company->getFieldInfo('exp_date');
    $this->assertEqual($exp_date['label'], "Expiration Date", "exp_date label is 'Expiration Date': $exp_date[label]");
    $this->assertFalse($exp_date['required'], "exp_date is not required.");
    $this->assertEqual($exp_date['type'], 'date', "exp_date type is Date: $exp_date[type].");

  }

  /**
   * Verify company_category field assertions.
   */
  public function testCompanyCategoryField() {
    $field = $this->form->getElement('company_category');
    $this->assertEqual($field['#title'], 'Company Category', "Company Field company_category exists.");
    $this->assertEqual($field['#type'], 'select', 'field company_category is a select list.');
    $this->assertFalse($field['#required'], 'field company_category is not required.');
    $this->assertEqual(count($field['#options']), 30, 'field company_category has 30 options.');
  }

  /**
   * Verify billing_area field assertions.
   */
  public function testBillingAreaField() {
    $field = $this->form->getElement('billing_area');
    $this->assertEqual($field['#title'], 'Billing Area', "field billing_area exists.");
    $this->assertEqual($field['#type'], 'select', "field billing_area type is select.");
    $this->assertEqual(count($field['#options']), 4, "field billing_area has 4 options by default.");
    $expected_options = array(
      '_none' => '- None -',
      'L' => 'Local - within 11 miles',
      'R' => 'Regional - 11 to 50 miles',
      'M' => 'Remote - more than 50 miles',
    );
    $this->assertEqual($field['#options'], $expected_options, "field billing_area has the expected options.");
    $this->assertFalse($field['#required'], 'field billing_area is not required by default.');

    // Check the billing_are is required for Company Administrators.
    $user = new User();
    $user->loginAs('Company Administrator');
    $form = new CompanyEntityForm($this->company->getEntity());
    $field = $form->getElement('billing_area');
    $this->assertTrue($field['#required'], 'field billing_area is required for Company Administrator.');

  }

  /**
   * Verify phone_type field assertions.
   */
  public function testPhoneTypeField() {
    $field = $this->form->getElement('phone_type');
    $this->assertEqual($field['#title'], 'Type', "field phone_type exists.");
    $this->assertEqual($field['#type'], 'select', "field phone_type type is select.");
    $expected_options = array(
      '_none' => '- None -',
      'Phone' => 'Phone',
      'Fax' => 'Fax',
    );
    $this->assertEqual($field['#options'], $expected_options, "field phone_type has the expected options.");
  }

  /**
   * Verify phone_number field assertions.
   */
  public function testPhoneNumberField() {
    $field = $this->form->getElement('phone_number');
    $type = $field['value']['#type'];
    $this->assertEqual($field['#title'], '', "field phone_number exists.");
    $this->assertEqual($type, 'textfield', 'field phone_number is type textfield');
  }

  /**
   * Verify website field assertions.
   */
  public function testWebsiteField() {
    $field = $this->form->getElement('website');
    $type = $field['value']['#type'];
    $this->assertEqual($field['#title'], 'Website', "field website exists.");
    $this->assertEqual($type, 'textfield', 'field webite is type text.');
  }

  /**
   * Verify cust_notes field assertions.
   */
  public function testCustomNotesField() {
    $field = $this->form->getElement('cust_notes');
    $type = $field['value']['#type'];
    $this->assertEqual($field['#title'], 'Customer Service Notes', "field website exists.");
    $this->assertEqual($type, 'textarea', 'field cust_notes is type textarea.');
  }

  /**
   * Verify account_number field assertions.
   */
  public function testAccountNumberField() {
  }

  /**
   * Verify last_updated field assertions.
   */
  public function testLastUpdatedField() {
  }

  /**
   * Verify updated_by field assertions.
   */
  public function testUpdatedByField() {
  }

  /**
   * Verify billing_contact field assertions.
   */
  public function testBillingContact() {
  }

  /**
   * Verify membership_contact field assertions.
   */
  public function testMembershipContactField() {
  }

  /**
   * Verify tax_exempt field assertions.
   */
  public function testTaxExemptField() {
  }

  /**
   * Verify invoice field assertions.
   */
  public function testInvoiceField() {
  }

  /**
   * Verify old_company_id field assertions.
   */
  public function testOldCompanyIdField() {
  }

  /**
   * Verify system_comments field assertions.
   */
  public function testSystemCommentsField() {
  }

  /**
   * Verify comment_range_start field assertions.
   */
  public function testCommentRangeStartField() {
  }

  /**
   * Verify comment_range_end field assertions.
   */
  public function testCommentRangeEndField() {
  }

  /**
   * Test Company::hookForm().
   */
  public function testHookForm() {
  }

  /**
   * Verify some assumptions about refrences within an object instance.
   */
  public function testRefrencer() {
    $array = array();
    $array_ref = new Referencer($array);
    $array_ref->setRef('Hello');
    $this->assertEqual($array['test'], 'Hello', "We can reference objects from within other objects.");
    $this->assertTrue(TRUE, "This is cool.");
  }
}


class Referencer {
  protected $ref;

  /**
   * Referencer constructor.
   */
  public function __construct(&$ref) {
    $this->ref =& $ref;
  }

  /**
   * Intializes the refereced object.
   */
  public function setRef($test) {
    $this->ref['test'] = $test;
  }
}
