<?php
/**
 * @file
 * Basic unit testing for Person Search View.
 */


class PersonSearchViewTestCase extends DrupalWebTestCase {

  protected $public_files_directory = 'files';

  /**
   * Overrides parent::setUp().
   */
  public function setUp() {
    $this->setup = TRUE;
    $this->user->name = 'admin';
    $this->user->pass_raw = 'buddy';
  }

  /**
   * Overrides parent::tearDown().
   */
  public function tearDown() {
  }

  /**
   * Initialize.
   */
  public static function getInfo() {
    return array(
      'name' => 'Person Search View tests.',
      'description' => 'Unit tests for Person Search View.',
      'group' => 'Jenkins',
    );
  }

  /**
   * Unit test _result_field_combine().
   */
  public function testResultFieldCombine() {
    $result = (object) array(
      'field1' => array(array("test" => "value")),
      'field2' => array(array("test" => "another_value")),
    );
    $combine = _result_field_combine($result, array('field1', 'field2'));
    $expected = array(array("test" => "value"), (array("test" => "another_value")));
    $this->assertEqual($combine->field1, $expected, "Arbitray fields are combined as expected");
  }

  /**
   * Functional for single results redirects on searches.
   */
  public function testSingleResultRedirect() {
    $person1 = new Person();
    $person1->name = "[unit-test] " . time();
    $person1->status = 2;
    $person1->save();

    $this->drupalLogin($this->user);
    $this->drupalGet("person/search", array("query" => array("id" => $person1->id)));
    $message = "Single result redirects to entity page";
    $this->assertPattern('|page-person|', $message);

    $person2 = new Person();
    $person2->name = "[unit-test] " . time();
    $person1->status = 2;
    $person2->save();

    $this->drupalGet("person/search", array("query" => array("field_status_value" => "2")));
    $message = "Multiple results display the results on the search page";
    $this->assertPattern('|views-table|', $message);

    $person1->delete();
    $person2->delete();
  }

  /**
   * Unit test person_views_query_alter().
   */
  public function testPersonViewsQueryAlter() {
    return;
    $views = views_get_view('person_search');
    $views->set_display('page_1');
    $input = array(
      'last_value' => "test1\ntest2\ntest3",
      'sort_by' => 'last_value',
      'sort_order' => 'ASC',
    );
    $views->set_exposed_input($input);
    $views->execute();

    // Check that the condition type has been set to 'OR'.
    $actual = $views->query->where[0]['type'];
    $expected = 'OR';
    $this->assertEqual($actual, $expected, 'The where clause are added as OR statements.');

    // Check that multi names search query alter works as expected.
    $actual = $views->query->where[0]['conditions'];
    $expected = array(
      0 => array(
        'field' => 'last_value',
        'value' => '%test1%',
        'operator' => 'LIKE',
      ),
      1 => array(
        'field' => 'last_value',
        'value' => '%test2%',
        'operator' => 'LIKE',
      ),
      2 => array(
        'field' => 'last_value',
        'value' => '%test3%',
        'operator' => 'LIKE',
      ),
    );
    $this->assertEqual($actual, $expected,
      'The expected conditions are added to the company multi name s query.');
  }
}
