<?php
/**
 * @file
 * Unit test for cdb.module functions.
 */

module_load_include('module', 'cdb');

class CdbModuleTestCase extends DrupalWebTestCase {

  protected $niceMenu;

  /**
   * Overrides parent::getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Cdb Module Unit Tests',
      'description' => 'Unit tests for functions within cdb.module',
      'group' => 'Jenkins',
    );
  }

  /**
   * Sets up tests.
   */
  public function setUp() {
    $this->setup = TRUE;
  }

  /**
   * Teardown tests.
   */
  public function tearDown() {
  }

  /**
   * Test cdb_entity_info_alter().
   */
  public function testCdbEntityInfoAlter() {
    $entity_info = array();
    foreach (get_cdb_entities() as $entity) {
      $entity_info[$entity] = array(
        'bundles' => array(
          'company' => array(
            'crud' => array(
              'view' => '',
              'add' => '',
            ),
          ),
        ),
      );
    }
    cdb_entity_info_alter($entity_info);
    $cdb_entities = get_cdb_entities();

    // Check correct CRUD alterations happen for all the cdb entity types.
    foreach ($cdb_entities as $entity) {
      $actual =& $entity_info[$entity]['bundles'][$entity];
      // Create.
      $this->assertEqual($actual['crud']['add']['path'], "$entity/add",
        "The $entity entity add action path is '$entity/add'");
      // Read.
      $this->assertEqual($actual['crud']['view']['path'], "$entity/%",
        "The $entity entity view action path is 'company/%'");
      // Update.
      $this->assertEqual($actual['crud']['edit']['path'], "$entity/%/edit",
        "The $entity entity edit action path is '$entity/edit'");
      // Delete.
      $this->assertEqual($actual['crud']['delete']['path'], "$entity/%/delete",
        "The $entity entity delete action path is '$entity/%/delete'");
    }
  }

  /**
   * Test cdb_menu_alter().
   */
  public function testCdbMenuAlter() {
    $items = array();
    $actual = cdb_menu_alter($items);
    $this->assertFalse($actual, "cdb_menu_alter() does nothing by default.");

    foreach (get_cdb_entities() as $entity) {
      $items["$entity/%"] = array();
    }
    $actual = cdb_menu_alter($items);
    $this->assertTrue($actual, "cdb_menu_alter() alters menu items when cdb enties are confirmed.");

    foreach (get_cdb_entities() as $entity) {
      foreach (array('edit', 'delete', '') as $mode) {
        $key = !empty($mode) ? "$entity/%/$mode" : "$entity/%";
        $action = !empty($mode) ? $mode : 'view';
        $actual = $items[$key]['page callback'];
        $expected = "cdb_${action}_page";

        $this->assertEqual($actual, $expected, "cdb_menu_alter() works as expected $entity $action.");
      }
    }
  }

  /**
   * Test cdb hook_perms().
   */
  public function testCdbPerms() {
    $actual = cdb_permission();

    foreach (get_cdb_entities() as $entity) {
      $this->assertTrue(in_array("$entity add", array_keys($actual)),
        "Cdb defines a '$entity add' permission.");

      $this->assertTrue(in_array("$entity view", array_keys($actual)),
        "Cdb defines a '$entity view' permission.");

      $this->assertTrue(in_array("$entity edit", array_keys($actual)),
        "Cdb defines a '$entity edit' permission.");

      $this->assertTrue(in_array("$entity delete", array_keys($actual)),
        "Cdb defines a '$entity delete' permission.");
    }
  }

  /**
   * Test nice_menus functionality.
   */
  public function testNiceMenus() {
    $variable['id'] = 2;
    $variable['direction'] = 'horizontal';
    $variable['menu_name'] = 'navigation';
    $variable['depth'] = 3;

    $user = new User();
    $user->loginAs('Company Administrator');
    $output = theme('nice_menus', $variable);

    $this->assertTrue(is_string($output['content']),
      "Nice menu is not empty for Company Administrator.");

    // Set up for next test.
    $this->niceMenu = $output['content'];
    $user->reset();

  }

  /**
   * Test cdb_page_preprocess().
   */
  public function testCdbPreprocessPage() {
    $user = new User();
    $user->loginAs('Company Administrator');

    $actual = array();
    cdb_preprocess_page($actual);

    $this->assertEqual($actual['navigation_nice_menu'], $this->niceMenu,
      "cdb_page_preprocessor adds the navigation nice_menu variable..");

    $user->reset();
  }


  /**
   * Test getCdbEntities.
   */
  public function getCdbEntities() {
    $actual = get_cdb_entities();
    $expected = array('company', 'person', 'barcode', 'phone_number', 'address');

    $this->asserEqual($expected, $actual,
      "get_cdb_entities() returns the expected list of CDB defined entities.");
  }

  /**
   * Test company cdb_add_new_form().
   */
  public function testCdbAddNewForm() {
    $actual = cdb_add_new_form('company');

    $this->assertTrue((is_string($actual) && !empty($actual)),
      "Company add should return a  non empty string.");
  }

  /**
   * Test cdb view page.
   */
  public function testCdbViewPage() {
    $company = new Company();
    $company->company_name = "[unit-test] " . time();
    $company->save();
    $actual = cdb_view_page('company', $company->id);

    $this->assertTrue((is_string($actual) && !empty($actual)),
      "Cdb view page returns a non empty string.");
  }

  /**
   * Test determining suspended status. 
   */
  public function testCheckSuspendedField() {
    $suspended1 = new stdclass();
    $suspended1->field_suspended[] = array('raw' => array("value" => "Y"));
    $suspended2 = new stdclass();
    $suspended2->field_suspended_1[] = array('raw' => array("value" => "y"));
    $not_suspended = new stdclass();
    $not_suspended->field_suspended[] = array('raw' => array("value" => "n"));

    _cdb_check_suspended_field($suspended1, 'field_suspended');
    $this->assertTrue($suspended1->suspended, "Returns suspended on Y");

    _cdb_check_suspended_field($suspended2, 'field_suspended_1');
    $this->assertTrue($suspended2->suspended, "Returns suspended on y");

    _cdb_check_suspended_field($not_suspended, 'field_suspended');
    $this->assertFalse($not_suspended->suspended, "Returns not suspended on n");
  }

  /**
   * Tests determining which user selected sorts should alter the query.
   */
  public function testDecideWhichSortsToAdd() {
    $data = array(
      "sort_by"   => "id",
      "sort_by_1" => "last_value",
      "sort_by_2" => "first_value",
    );
    $result = cdb_which_sorts_to_add($data);
    $expected = array("last_value", "first_value");
    $this->assertEqual($result, $expected, "$result[0] : $result[1]");

    $data = array(
      "sort_by"   => "id",
      "sort_by_1" => "last_value",
      "sort_by_2" => "id",
    );
    $result = cdb_which_sorts_to_add($data);
    $expected = array("last_value");
    $this->assertEqual($result, $expected, "First sort value returned correctly");

    $data = array(
      "sort_by"   => "id",
      "sort_by_1" => "id",
      "sort_by_2" => "first_value",
    );
    $result = cdb_which_sorts_to_add($data);
    $expected = array("first_value");
    $this->assertEqual($result, $expected, "Second sort value returned correctly");

    $data = array(
      "sort_by"   => "id",
      "sort_by_1" => "id",
      "sort_by_2" => "id",
    );
    $result = cdb_which_sorts_to_add($data);
    $expected = array();
    $this->assertEqual($result, $expected, "All repeated extra sort values returned correctly");

    $data = array(
      "sort_by"   => "id",
      "sort_by_1" => "",
      "sort_by_2" => "",
    );
    $result = cdb_which_sorts_to_add($data);
    $expected = array();
    $this->assertEqual($result, $expected, "Blank extra sort value returned correctly");
  }

  /**
   * Test cdb_views_query_alter().
   *
   * Tests that passing the view extra sort filter actually affects result
   * sorting.
   */
  public function testViewQueryAlter() {
    $two_sort = views_get_view('person_search');
    $two_sort->set_display('page');
    $two_sort->set_exposed_input(array(
      "field_person_category_value" => "m",
      "sort_by"                     => "last_value",
      "sort_order"                  => "ASC",
      "sort_by_1"                   => "first_value",
      "sort_by_2"                   => "first_value",
    ));
    $two_sort->pre_execute();
    $two_sort->execute();
    $orderby = $two_sort->query->orderby;
    $count = count($orderby);
    $this->assertEqual($count, 2,
      "The query sort attribute is the expected size : $count.");

    $three_sort = views_get_view('person_search');
    $three_sort->set_display('page');
    $three_sort->set_exposed_input(array(
      "field_person_category_value" => "m",
      "sort_by"                     => "last_value",
      "sort_order"                  => "ASC",
      "sort_by_1"                   => "first_value",
      "sort_by_2"                   => "field_status_value",
    ));
    $three_sort->pre_execute();
    $three_sort->execute();
    $orderby2 = $three_sort->query->orderby;
    $count = count($orderby2);
    $this->assertEqual($count, 3,
      "The query sort attribute is the expected size : $count.");
  }
}
