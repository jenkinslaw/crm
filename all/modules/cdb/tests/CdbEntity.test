<?php
/**
 * @file
 * Unit tests for the CDBEntity Class.
 */

class CdbEntityTestCase extends DrupalWebTestCase {

  protected $company;

  /**
   * Set up the tests.
   */
  public function setUp() {
    $this->setup = TRUE;
  }

  /**
   * Tear down.
   */
  public function tearDown() {
  }


  /**
   * Initialize.
   */
  public static function getInfo() {
    return array(
      'name' => 'CDbEntity tests.',
      'description' => 'Unit tests for CdbEntity Class.',
      'group' => 'Jenkins',
    );
  }


  /**
   * Test that the CdbeEntity contructor works as expected.
   */
  public function testConstruct() {
    $company = new Company();
    $expected = "Company";
    $actual = get_class($company);
    $this->assertEqual($expected, $actual, "The class is type Company: $actual.");
    $this->company = $company;
  }

  /**
   * Test that the CdbEntity get method works as expeced.
   */
  public function testGet() {
    $expected = '';
    $actual = $this->company->mas90_name;
    $this->assertEqual($expected, $actual, "We can retrieve field values.");

    // Assert that value() method also works.
    $expected = $actual;
    $actual = $this->company->mas90_name()->value();
    $this->assertEqual($expected, $actual, "the value() method works as expected.");
  }

  /**
   * Test that the CdbEntity set method works as expected.
   */
  public function testSet() {
    $expected = "[unit-test] Company Name";
    $this->company->mas90_name = "[unit-test] Company Name";
    $actual = $this->company->mas90_name;
    $this->assertEqual($expected, $actual, "We can set values that exist");

    // Check that we can still set values using the standard wrapper method.
    $expected = "[unit-test] Set standard";
    $this->company->mas90_name()->set($expected);
    $actual = $this->company->mas90_name()->value();
    $this->assertEqual($expected, $actual, "We can set values using the wrapper set() method.");

    // Check that we cannot add values to non existing properties.
    try {
      $message = "Cannot add value to non existing field.";
      $this->company->someRandomField = $message;
      $this->fail($message);
    }
    catch(Exception $e) {
      $this->pass($message);
    }
  }

  /**
   * Test that the CdbEntity save method works as expected.
   */
  public function testSave() {
    $id = $this->company->id;
    $this->assertEqual($id, NULL, "The id is not set before it is saved.");

    $this->company->save();
    $id = $this->company->id;
    $this->assertTrue(is_numeric($id), "Company can be saved.");

    $company = new Company($id);
    $this->assertEqual($id, $company->id, "We can retrieve the saved company");

  }

  /**
   * Test that the CdbEnity delete method works as expected.
   */
  public function testDelete() {
    $this->company->delete();
    $actual = entity_load_single('company', $this->company->id);
    $expected = FALSE;
    $result = print_r(array(
      'actual' => $actual,
      'expected' => $expected,
    ), TRUE);
    $this->assertEqual($actual, $expected, "We can delete the company: $result.");
  }

}
